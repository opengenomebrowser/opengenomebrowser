# Generated by Django 3.1.4 on 2020-12-17 08:05

from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('name', models.CharField(max_length=200, primary_key=True, serialize=False, unique=True)),
                ('description', models.TextField(blank=True)),
                ('anno_type', models.CharField(choices=[('GP', 'Gene Product'), ('GC', 'Gene Code'), ('OL', 'Ortholog'), ('CU', 'Custom Annotation'), ('KG', 'KEGG Gene'), ('KR', 'KEGG Reaction'), ('EC', 'Enzyme Commission'), ('GO', 'Gene Ontology')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Genome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=50, unique=True, verbose_name='Unique identifier')),
                ('contaminated', models.BooleanField(default=False, verbose_name='Contaminated?')),
                ('old_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Old identifier')),
                ('isolation_date', models.DateField(blank=True, null=True, verbose_name='Isolation date')),
                ('env_broad_scale', models.JSONField(blank=True, default=list, null=True)),
                ('env_local_scale', models.JSONField(blank=True, default=list, null=True)),
                ('env_medium', models.JSONField(blank=True, default=list, null=True)),
                ('growth_condition', models.CharField(blank=True, max_length=100, null=True, verbose_name='Growth vondition')),
                ('geographical_coordinates', models.CharField(blank=True, max_length=200, null=True, verbose_name='Geographical coordinates')),
                ('geographical_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Geographical name')),
                ('library_preparation', models.CharField(blank=True, max_length=40, null=True, verbose_name='Library Preparation')),
                ('sequencing_tech', models.CharField(blank=True, max_length=40, null=True, verbose_name='Sequencing technology')),
                ('sequencing_tech_version', models.CharField(blank=True, max_length=20, null=True, verbose_name='Sequencing technology version')),
                ('sequencing_date', models.DateField(blank=True, null=True, verbose_name='Sequencing date')),
                ('read_length', models.CharField(blank=True, max_length=8, null=True, verbose_name='Read length')),
                ('sequencing_coverage', models.CharField(blank=True, max_length=8, null=True, verbose_name='Sequencing coverage')),
                ('assembly_tool', models.CharField(blank=True, max_length=40, null=True, verbose_name='Assembly tool')),
                ('assembly_version', models.CharField(blank=True, max_length=40, null=True, verbose_name='Assembly version')),
                ('assembly_date', models.DateField(blank=True, null=True, verbose_name='Assembly date')),
                ('assembly_fasta_file', models.CharField(max_length=200)),
                ('assembly_gc', models.FloatField(blank=True, null=True, verbose_name='GC content')),
                ('assembly_longest_scf', models.IntegerField(blank=True, null=True, verbose_name='Longest scaffold')),
                ('assembly_size', models.IntegerField(blank=True, null=True, verbose_name='Assembly size')),
                ('assembly_nr_scaffolds', models.IntegerField(blank=True, null=True, verbose_name='Number of scaffolds')),
                ('assembly_n50', models.IntegerField(blank=True, null=True, verbose_name='N50')),
                ('nr_replicons', models.IntegerField(blank=True, null=True, verbose_name='Number of replicons')),
                ('custom_tables', models.JSONField(blank=True, default=list, null=True)),
                ('cds_tool', models.CharField(blank=True, max_length=50, null=True, verbose_name='Primary annotation tool')),
                ('cds_tool_date', models.DateField(blank=True, null=True, verbose_name='Date of primary annotation')),
                ('cds_tool_version', models.CharField(blank=True, max_length=20, null=True, verbose_name='Version of primary annotation')),
                ('cds_tool_faa_file', models.CharField(max_length=200)),
                ('cds_tool_gbk_file', models.CharField(max_length=200)),
                ('cds_tool_gff_file', models.CharField(max_length=200)),
                ('cds_tool_ffn_file', models.CharField(blank=True, max_length=200, null=True)),
                ('cds_tool_sqn_file', models.CharField(blank=True, max_length=200, null=True)),
                ('BUSCO', models.JSONField(default=dict)),
                ('BUSCO_percent_single', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True)),
                ('custom_annotations', models.JSONField(blank=True, default=list, null=True)),
                ('bioproject_accession', models.CharField(blank=True, max_length=20, null=True)),
                ('biosample_accession', models.CharField(blank=True, max_length=20, null=True)),
                ('genome_accession', models.CharField(blank=True, max_length=20, null=True)),
                ('literature_references', models.JSONField(blank=True, default=list, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='GenomeContent',
            fields=[
                ('identifier', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True, verbose_name='unique identifier')),
                ('n_genes', models.IntegerField(default=0, verbose_name='Number of genes')),
                ('_gbk_file_size', models.IntegerField(default=0)),
                ('custom_files', models.JSONField(default=list)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('tag', models.CharField(max_length=150, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(max_length=11)),
                ('text_color_white', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='TaxID',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('taxscientificname', models.CharField(max_length=110)),
                ('rank', models.CharField(max_length=50)),
                ('color', models.CharField(max_length=11)),
                ('text_color_white', models.BooleanField()),
                ('taxsuperkingdom', models.CharField(max_length=110, null=True)),
                ('taxphylum', models.CharField(max_length=110, null=True)),
                ('taxclass', models.CharField(max_length=110, null=True)),
                ('taxorder', models.CharField(max_length=110, null=True)),
                ('taxfamily', models.CharField(max_length=110, null=True)),
                ('taxgenus', models.CharField(max_length=110, null=True)),
                ('taxspecies', models.CharField(max_length=110, null=True)),
                ('taxsubspecies', models.CharField(max_length=110, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='website.taxid')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PathwayMap',
            fields=[
                ('slug', models.SlugField(max_length=200, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('filename', models.CharField(max_length=200, unique=True)),
                ('annotations', models.ManyToManyField(to='website.Annotation')),
            ],
        ),
        migrations.CreateModel(
            name='Organism',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(max_length=40, unique=True)),
                ('alternative_name', models.CharField(blank=True, max_length=200, null=True)),
                ('restricted', models.BooleanField(default=False)),
                ('representative', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, related_name='representative', to='website.genome')),
                ('tags', models.ManyToManyField(blank=True, to='website.Tag')),
                ('taxid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.taxid')),
            ],
        ),
        migrations.CreateModel(
            name='GenomeSimilarity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity', models.FloatField()),
                ('status', models.CharField(choices=[('D', 'DONE'), ('R', 'RUNNING'), ('F', 'FAILED')], max_length=1)),
                ('from_genome', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_ani', to='website.genomecontent')),
                ('to_genome', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_ani', to='website.genomecontent')),
            ],
            options={
                'unique_together': {('from_genome', 'to_genome')},
            },
        ),
        migrations.AddField(
            model_name='genomecontent',
            name='ani_similarity',
            field=models.ManyToManyField(related_name='_genomecontent_ani_similarity_+', through='website.GenomeSimilarity', to='website.GenomeContent'),
        ),
        migrations.AddField(
            model_name='genomecontent',
            name='annotations',
            field=models.ManyToManyField(to='website.Annotation'),
        ),
        migrations.AddField(
            model_name='genome',
            name='genomecontent',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.genomecontent'),
        ),
        migrations.AddField(
            model_name='genome',
            name='organism',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.organism'),
        ),
        migrations.AddField(
            model_name='genome',
            name='tags',
            field=models.ManyToManyField(blank=True, to='website.Tag'),
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('identifier', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('annotations', models.ManyToManyField(to='website.Annotation')),
                ('genomecontent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.genomecontent')),
            ],
        ),
        migrations.CreateModel(
            name='CoreGenomeDendrogram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.CharField(max_length=56, unique=True)),
                ('newick', models.TextField()),
                ('status', models.CharField(choices=[('D', 'DONE'), ('R', 'RUNNING'), ('F', 'FAILED')], max_length=1)),
                ('genomes', models.ManyToManyField(to='website.GenomeContent')),
            ],
        ),
    ]
